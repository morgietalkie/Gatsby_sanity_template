"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DocumentStatusBarBadges = DocumentStatusBarBadges;
exports.RenderDocumentBadgeState = RenderDocumentBadgeState;

var _reactHooks = require("@sanity/react-hooks");

var _react = _interopRequireDefault(require("react"));

var _default = _interopRequireDefault(require("part:@sanity/components/badges/default"));

var _DocumentStatusBarBadges = _interopRequireDefault(require("./DocumentStatusBarBadges.css"));

var _resolver = _interopRequireDefault(require("part:@sanity/base/document-badges/resolver"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function DocumentStatusBarBadgesInner(props) {
  if (props.badgeStates.length === 0) {
    return null;
  }

  return _react.default.createElement("div", {
    className: _DocumentStatusBarBadges.default.statusBadges
  }, props.badgeStates.map((badge, i) => _react.default.createElement(_default.default, {
    key: i,
    color: badge.color,
    title: badge.title
  }, badge.label)));
}

function DocumentStatusBarBadges(props) {
  var editState = (0, _reactHooks.useEditState)(props.id, props.type);
  var badges = editState ? (0, _resolver.default)(editState) : null;
  return badges ? _react.default.createElement(RenderDocumentBadgeState, {
    component: DocumentStatusBarBadgesInner,
    badges: badges,
    badgeProps: editState
  }) : null;
}

var badgeIds = new WeakMap();
var counter = 0;

var getBadgeId = badge => {
  if (badgeIds.has(badge)) {
    return badgeIds.get(badge);
  }

  var id = "".concat(badge.name || badge.displayName || '<anonymous>', "-").concat(counter++);
  badgeIds.set(badge, id);
  return id;
};

function RenderDocumentBadgeState(props) {
  var _React$useState = _react.default.useState([]),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      badgesWithStates = _React$useState2[0],
      setBadgesWithState = _React$useState2[1];

  var onStateChange = _react.default.useCallback(stateUpdate => {
    setBadgesWithState(prevState => {
      return props.badges.map(badge => {
        var id = getBadgeId(badge);
        return stateUpdate[0] === id ? [id, stateUpdate[1]] : prevState.find(prev => prev[0] === id) || [id, null];
      });
    });
  }, [props.badges]);

  var _ = props.badges,
      badgeProps = props.badgeProps,
      component = props.component,
      rest = _objectWithoutProperties(props, ["badges", "badgeProps", "component"]);

  return _react.default.createElement(_react.default.Fragment, null, component(_objectSpread({
    badgeStates: badgesWithStates.map((_ref) => {
      var _ref2 = _slicedToArray(_ref, 2),
          id = _ref2[0],
          state = _ref2[1];

      return state && _objectSpread({}, state, {
        badgeId: id
      });
    }).filter(Boolean)
  }, rest)), props.badges.map(badge => {
    var badgeId = getBadgeId(badge);
    return _react.default.createElement(BadgeStateContainer, {
      key: badgeId,
      badge: badge,
      id: badgeId,
      badgeProps: props.badgeProps,
      onUpdate: onStateChange
    });
  }));
}

var BadgeStateContainer = _react.default.memo(function BadgeStateContainer(props) {
  var id = props.id,
      badge = props.badge,
      onUpdate = props.onUpdate,
      badgeProps = props.badgeProps;
  var state = badge(badgeProps);
  onUpdate([id, state ? state : null]);
  return null;
});