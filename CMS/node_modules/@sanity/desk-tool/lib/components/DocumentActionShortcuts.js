"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DocumentActionShortcuts = void 0;

var _react = _interopRequireDefault(require("react"));

var _utils = require("part:@sanity/base/actions/utils");

var _reactHooks = require("@sanity/react-hooks");

var _resolver = _interopRequireDefault(require("part:@sanity/base/document-actions/resolver"));

var _isHotkey = _interopRequireDefault(require("is-hotkey"));

var _ActionStateDialog = require("./DocumentStatusBar/ActionStateDialog");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function KeyboardShortcutResponder(_ref) {
  var actionStates = _ref.actionStates,
      activeId = _ref.activeId,
      children = _ref.children,
      className = _ref.className,
      onActionStart = _ref.onActionStart,
      onKeyUp = _ref.onKeyUp;
  var active = actionStates.find(act => act.actionId === activeId);

  var handleKey = _react.default.useCallback(event => {
    var matchingStates = actionStates.filter(state => state.shortcut && (0, _isHotkey.default)(state.shortcut, event));
    var matchingState = matchingStates[0];

    if (matchingState) {
      event.preventDefault();
    }

    if (matchingStates.length > 1) {
      console.warn("Keyboard shortcut conflict: More than one document action matches the shortcut \"".concat(matchingState.shortcut, "\""));
    }

    if (matchingState && !matchingState.disabled) {
      matchingState.onHandle();
      onActionStart(matchingState.actionId);
    }

    onKeyUp(event);
  }, [actionStates]);

  return _react.default.createElement("div", {
    onKeyDown: handleKey,
    tabIndex: -1,
    className: className
  }, children, active && active.dialog && _react.default.createElement(_ActionStateDialog.ActionStateDialog, {
    dialog: active.dialog
  }));
}

var DocumentActionShortcuts = _react.default.memo(props => {
  var editState = (0, _reactHooks.useEditState)(props.id, props.type);
  var actions = editState ? (0, _resolver.default)(editState) : null;

  var _React$useState = _react.default.useState(null),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      activeId = _React$useState2[0],
      setActiveId = _React$useState2[1];

  var onActionComplete = _react.default.useCallback(() => setActiveId(null), []);

  var onActionStart = _react.default.useCallback(id => setActiveId(id), []);

  return actions ? _react.default.createElement(_utils.RenderActionCollectionState, {
    actions: actions,
    actionProps: editState,
    component: KeyboardShortcutResponder,
    onActionStart: onActionStart,
    onActionComplete: onActionComplete,
    className: props.className,
    activeId: activeId,
    onKeyUp: props.onKeyUp
  }, props.children) : null;
});

exports.DocumentActionShortcuts = DocumentActionShortcuts;