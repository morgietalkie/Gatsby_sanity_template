"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DiscardChangesAction = DiscardChangesAction;

var _react = _interopRequireDefault(require("react"));

var _reactHooks = require("@sanity/react-hooks");

var _closeIcon = _interopRequireDefault(require("part:@sanity/base/close-icon"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var DISABLED_REASON_TITLE = {
  NO_CHANGES: 'This document has no unpublished changes',
  NOT_PUBLISHED: 'This document is not published'
};

function DiscardChangesAction(_ref) {
  var id = _ref.id,
      type = _ref.type,
      published = _ref.published,
      liveEdit = _ref.liveEdit,
      onComplete = _ref.onComplete;

  if (!published || liveEdit) {
    return null;
  }

  var _useDocumentOperation = (0, _reactHooks.useDocumentOperation)(id, type),
      discardChanges = _useDocumentOperation.discardChanges;

  var _React$useState = _react.default.useState(false),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      isConfirmDialogOpen = _React$useState2[0],
      setConfirmDialogOpen = _React$useState2[1];

  return {
    icon: _closeIcon.default,
    disabled: Boolean(discardChanges.disabled),
    title: discardChanges.disabled && DISABLED_REASON_TITLE[discardChanges.disabled] || '',
    label: 'Discard changes',
    onHandle: () => {
      setConfirmDialogOpen(true);
    },
    dialog: isConfirmDialogOpen && {
      type: 'confirm',
      color: 'danger',
      onCancel: onComplete,
      onConfirm: () => {
        discardChanges.execute();
        onComplete();
      },
      message: _react.default.createElement(_react.default.Fragment, null, _react.default.createElement("strong", null, "Are you sure"), " you want to discard all changes since last published?")
    }
  };
}