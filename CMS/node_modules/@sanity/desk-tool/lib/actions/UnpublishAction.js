"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UnpublishAction = UnpublishAction;

var _reactHooks = require("@sanity/react-hooks");

var _closeIcon = _interopRequireDefault(require("part:@sanity/base/close-icon"));

var _react = _interopRequireDefault(require("react"));

var _ConfirmUnpublish = _interopRequireDefault(require("../components/ConfirmUnpublish"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var DISABLED_REASON_TITLE = {
  NOT_PUBLISHED: 'This document is not published'
};

function UnpublishAction(_ref) {
  var id = _ref.id,
      type = _ref.type,
      draft = _ref.draft,
      published = _ref.published,
      onComplete = _ref.onComplete,
      liveEdit = _ref.liveEdit;

  if (liveEdit) {
    return null;
  }

  var _useDocumentOperation = (0, _reactHooks.useDocumentOperation)(id, type),
      unpublish = _useDocumentOperation.unpublish;

  var _React$useState = _react.default.useState(null),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      error = _React$useState2[0],
      setError = _React$useState2[1];

  var _React$useState3 = _react.default.useState(false),
      _React$useState4 = _slicedToArray(_React$useState3, 2),
      didUnpublish = _React$useState4[0],
      setDidUnpublish = _React$useState4[1];

  var _React$useState5 = _react.default.useState(false),
      _React$useState6 = _slicedToArray(_React$useState5, 2),
      isConfirmDialogOpen = _React$useState6[0],
      setConfirmDialogOpen = _React$useState6[1];

  var getDialog = () => {
    if (error) {
      return {
        type: 'error',
        onClose: () => setError(null),
        title: 'An error occured',
        content: error.message
      };
    }

    if (didUnpublish) {
      return {
        type: 'success',
        onClose: () => {
          setDidUnpublish(false);
        },
        title: 'Succesfully unpublished the document'
      };
    }

    if (isConfirmDialogOpen) {
      return {
        type: 'legacy',
        onClose: onComplete,
        title: 'Unpublish',
        content: _react.default.createElement(_ConfirmUnpublish.default, {
          draft: draft,
          published: published,
          onCancel: () => {
            setConfirmDialogOpen(false);
            onComplete();
          },
          onConfirm: /*#__PURE__*/_asyncToGenerator(function* () {
            setConfirmDialogOpen(false);
            unpublish.execute();
            onComplete();
          })
        })
      };
    }

    return null;
  };

  return {
    icon: _closeIcon.default,
    disabled: Boolean(unpublish.disabled),
    label: 'Unpublish',
    title: unpublish.disabled ? DISABLED_REASON_TITLE[unpublish.disabled] : '',
    onHandle: () => {
      setConfirmDialogOpen(true);
    },
    dialog: getDialog()
  };
}