"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RenderActionCollectionState = RenderActionCollectionState;

var React = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var actionIds = new WeakMap();
var counter = 0;

var getActionId = action => {
  if (actionIds.has(action)) {
    return actionIds.get(action);
  }

  var id = "".concat(action.name || action.displayName || '<anonymous>', "-").concat(counter++);
  actionIds.set(action, id);
  return id;
};

function RenderActionCollectionState(props) {
  var _React$useState = React.useState([]),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      actionsWithStates = _React$useState2[0],
      setActionsWithState = _React$useState2[1];

  var _React$useState3 = React.useState({}),
      _React$useState4 = _slicedToArray(_React$useState3, 2),
      keys = _React$useState4[0],
      setKey = _React$useState4[1];

  var handleComplete = React.useCallback(id => {
    setKey(keys => _objectSpread({}, keys, {
      [id]: (keys[id] || 0) + 1
    }));
    props.onActionComplete();
  }, [props.actions]);
  var onStateChange = React.useCallback(stateUpdate => {
    setActionsWithState(prevState => {
      return props.actions.map(action => {
        var id = getActionId(action);
        return stateUpdate[0] === id ? [id, stateUpdate[1]] : prevState.find(prev => prev[0] === id) || [id];
      });
    });
  }, [props.actions]);

  var _ = props.actions,
      actionProps = props.actionProps,
      component = props.component,
      rest = _objectWithoutProperties(props, ["actions", "actionProps", "component"]);

  return React.createElement(React.Fragment, null, component(_objectSpread({
    actionStates: actionsWithStates.map((_ref) => {
      var _ref2 = _slicedToArray(_ref, 2),
          id = _ref2[0],
          state = _ref2[1];

      return state && _objectSpread({}, state, {
        actionId: id
      });
    }).filter(Boolean)
  }, rest)), props.actions.map(action => {
    var actionId = getActionId(action);
    return React.createElement(ActionStateContainer, {
      key: "".concat(actionId, "-").concat(keys[actionId] || '0'),
      action: action,
      id: actionId,
      actionProps: props.actionProps,
      onUpdate: onStateChange,
      onComplete: handleComplete
    });
  }));
}

var ActionStateContainer = React.memo(function ActionStateContainer(props) {
  var id = props.id,
      action = props.action,
      onUpdate = props.onUpdate,
      _onComplete = props.onComplete,
      actionProps = props.actionProps;
  var state = action(_objectSpread({}, actionProps, {
    onComplete: () => _onComplete(id)
  }));
  onUpdate([id, state ? state : null]);
  return null;
});